
#Область ПрограммныйИнтерфейс

Функция ОписаниеОшибки_(ИнформацияОбОшибке, ПолучатьСообщенияПользователю = Истина, ОчищатьСообщенияПользователю = Истина, НумероватьСообщенияПользователю = Истина) Экспорт
	
	ОписаниеОшибки = СтруктураОписанияОшибки();
	
	ОписаниеОшибки.ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	КоличествоСообщений = 0;
	СообщенияПользователюСтрокой = Новый Массив;
	Если ПолучатьСообщенияПользователю Тогда
		
		СообщенияПользователю = ПолучитьСообщенияПользователю(ОчищатьСообщенияПользователю);
		КоличествоСообщений = СообщенияПользователю.Количество();
		
		НомерСообщения = 0;
		Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
			
			ОписаниеОшибки.СообщенияПользователю.Добавить(СообщениеПользователю);
			
			ТекстСообщения = СообщениеПользователю.Текст;
			Если НумероватьСообщенияПользователю Тогда
				НомерСообщения = НомерСообщения + 1;
				ТекстСообщения = XMLСтрока(НомерСообщения) + ". " + ТекстСообщения;
			КонецЕсли;
			СообщенияПользователюСтрокой.Добавить(ТекстСообщения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеОшибки.СообщенияПользователюКоличество = КоличествоСообщений;
	ОписаниеОшибки.СообщенияПользователюСтрокой = СтрСоединить(СообщенияПользователюСтрокой, Символы.ПС);
	
	ТекстОшибки = НСтр("ru = 'Текст исключения:'") + Символы.ПС + ОписаниеОшибки.ТекстИсключения;
	СообщенияПользователюШапка = НСтр("ru = 'Сообщения пользователю: '") + XMLСтрока(КоличествоСообщений); 
	Если КоличествоСообщений = 0 Тогда
		СообщенияПользователюШапка = СообщенияПользователюШапка + " " + НСтр("ru = '(отсутствуют).'")
	Иначе
		СообщенияПользователюШапка = СообщенияПользователюШапка + " " + НСтр("ru = '(приведены ниже).'");
		СообщенияПользователюШапка = СообщенияПользователюШапка + Символы.ПС + ОписаниеОшибки.СообщенияПользователюСтрокой;
	КонецЕсли;
	ТекстОшибки = ТекстОшибки + Символы.ПС + СообщенияПользователюШапка;
	
	ОписаниеОшибки.ТекстОшибки = ТекстОшибки;
	
	Возврат ОписаниеОшибки;

КонецФункции

// Метод записывает ошибку в ЖР (журнал регистрации).
//
// Параметры:
//   ИмяСобытия - Строка - аналогичен параметру системного метода ЗаписьЖурналаРегистрации()
//   Комментарий - Строка - аналогичен параметру системного метода ЗаписьЖурналаРегистрации()
//   Данные - ЛюбаяСсылка, Число, Строка, Дата, Булево, Неопределено, Null, Тип - 
//            аналогичен параметру системного метода ЗаписьЖурналаРегистрации().
//            Если значение является ссылкой и мы находимся внутри поломанной транзакции,
//            то эта ссылка будет безопасно преобразована в строку (УИД этой ссылки).
//   ОбъектМетаданных - ОбъектМетаданных - аналогичен параметру системного метода ЗаписьЖурналаРегистрации().
//                                         Может отличаться от метаданных значения параметра "Данные".
//                                         Если не указан, то будет получен из значения параметра "Данные".
//
Процедура Ошибка(ИмяСобытия, Комментарий = "", Данные = Неопределено, ОбъектМетаданных = Неопределено) Экспорт

	ОбъектМД = АСНА_ОбщегоНазначения.ПолучитьМетаданные(Данные);
	Если ОбъектМетаданных = Неопределено Тогда
		ОбъектМетаданных = ОбъектМД;
	КонецЕсли;
	
	ДанныеДляЖР = Данные;
	ЭтоСсылочныйОбъектМетаданных = Ложь;
	Если ОбъектМД <> Неопределено Тогда
		ЭтоСсылочныйОбъектМетаданных = АСНА_ОбщегоНазначения.ЭтоСсылочныйОбъектМетаданных(ОбъектМД);
		Если ЭтоСсылочныйОбъектМетаданных Тогда
			ДанныеДляЖР = АСНА_ОбщегоНазначения.СсылкаДляПередачиВЖурналРегистрации(ДанныеДляЖР);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		ОбъектМетаданных,
		ДанныеДляЖР,
		Комментарий
	);

КонецПроцедуры

// Метод записывает информацию в ЖР (журнал регистрации).
//
// Параметры:
//   ИмяСобытия - Строка - аналогичен параметру системного метода ЗаписьЖурналаРегистрации()
//   Комментарий - Строка - аналогичен параметру системного метода ЗаписьЖурналаРегистрации()
//   Данные - ЛюбаяСсылка, Число, Строка, Дата, Булево, Неопределено, Null, Тип - 
//            аналогичен параметру системного метода ЗаписьЖурналаРегистрации().
//            Если значение является ссылкой и мы находимся внутри поломанной транзакции,
//            то эта ссылка будет безопасно преобразована в строку (УИД этой ссылки).
//   ОбъектМетаданных - ОбъектМетаданных - аналогичен параметру системного метода ЗаписьЖурналаРегистрации().
//                                         Может отличаться от метаданных значения параметра "Данные".
//                                         Если не указан, то будет получен из значения параметра "Данные".
//
Процедура Информация(ИмяСобытия, Комментарий = "", Данные = Неопределено, ОбъектМетаданных = Неопределено) Экспорт

	ОбъектМД = АСНА_ОбщегоНазначения.ПолучитьМетаданные(Данные);
	Если ОбъектМетаданных = Неопределено Тогда
		ОбъектМетаданных = ОбъектМД;
	КонецЕсли;
	
	ДанныеДляЖР = Данные;
	ЭтоСсылочныйОбъектМетаданных = Ложь;
	Если ОбъектМД <> Неопределено Тогда
		ЭтоСсылочныйОбъектМетаданных = АСНА_ОбщегоНазначения.ЭтоСсылочныйОбъектМетаданных(ОбъектМД);
		Если ЭтоСсылочныйОбъектМетаданных Тогда
			ДанныеДляЖР = АСНА_ОбщегоНазначения.СсылкаДляПередачиВЖурналРегистрации(ДанныеДляЖР);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Информация,
		ОбъектМетаданных,
		ДанныеДляЖР,
		Комментарий
	);

КонецПроцедуры

#КонецОбласти

Функция СтруктураОписанияОшибки()
	
	СтруктураОписанияОшибки = Новый Структура;
	СтруктураОписанияОшибки.Вставить("ТекстИсключения", "");
	СтруктураОписанияОшибки.Вставить("СообщенияПользователю", Новый Массив);
	СтруктураОписанияОшибки.Вставить("СообщенияПользователюКоличество", 0);
	СтруктураОписанияОшибки.Вставить("СообщенияПользователюСтрокой", "");
	СтруктураОписанияОшибки.Вставить("ТекстОшибки", "");
	
	Возврат СтруктураОписанияОшибки;
	
КонецФункции
