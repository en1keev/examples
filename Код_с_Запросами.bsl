// Обработчик РЗ "ОбновлениеФиксированныхСписковАптекМероприятий".
Функция ОбновлениеФиксированныхСписковАптекМероприятий(Знач ДатаКвартала = Неопределено, Знач ВызыватьИсключениеВСлучаеНеуспеха = Истина, ПротоколВыполнения = "", СообщенияОбОшибках = "") Экспорт

	Отказ = Ложь;
	Протокол = Новый Массив;
	Ошибки = Новый Массив;
	
	ИмяСобытия = "РаботаСКонтрактами.ОбновлениеФиксированныхСписковАптекМероприятий";
	МетаданныеРЗ = Метаданные.РегламентныеЗадания.ОбновлениеФиксированныхСписковАптекМероприятий;
	
	ВидРегламентнойОперации = Справочники.ТипыОбменаSQL.ОбновлениеФиксСпискаАптекМероприятия;
	// На момент разработки задачи было требование: РЗ не должно обрабатывать ММ ранее 3 квартала 2021.
	// После наступления 3 квартала 2021 (и включения РЗ на постоянку) эту проверку можно отсюда убрать.
	// Оставить на случай, если в будущем такой рубильник может еще раз пригодиться
	// (когда отключения РЗ недостаточно и хочется гарантировать невозможность вызова этого метода откуда бы ни было).
	ИмяПараметра = "РазрешитьВыполнение";
	ВыполнениеРазрешено = Справочники.ТипыОбменаSQL.ПолучитьПараметрТипаОбмена(ВидРегламентнойОперации, ИмяПараметра);
	Если ТипЗнч(ВыполнениеРазрешено) <> Тип("Булево") ИЛИ НЕ ВыполнениеРазрешено Тогда
		ТекстСообщения = НСтр("ru = 'Выполнение операции не разрешено.
                               |У типа обмена ""%1"" в доп. параметрах должен быть указан булевый параметр ""%2"" со значением ""Истина"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВидРегламентнойОперации, ИмяПараметра);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ДатаКвартала = Неопределено Тогда
		ДатаКвартала = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачалоКвартала = НачалоКвартала(ДатаКвартала);
	КонецКвартала = КонецКвартала(ДатаКвартала);
	НачалоСледующегоКвартала = НачалоКвартала(КонецКвартала + 1);
	КонецСледующегоКвартала = КонецКвартала(НачалоСледующегоКвартала);
	Протокол.Добавить(СтрШаблон(НСтр("ru = 'Обрабатываемый период: %1 - %2.'"), НачалоКвартала, КонецСледующегоКвартала)); 
	
	// МВТ используется внутри циклов для пробрасывания ММ-кандидатов в запросы двойного цикла,
	// а также для пробрасывания черного списка (запроса внешнего цикла) в запрос внутреннего.
	МВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ММ.Ссылка КАК Ссылка,
	|	ММ.Партнер КАК Партнер,
	|	ММ.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ММ.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	|ПОМЕСТИТЬ ВТ_Кандидаты
	|ИЗ
	|	Документ.МаркетинговоеМероприятие КАК ММ
	|ГДЕ
	|	НЕ ММ.ПометкаУдаления
	|	И ММ.ДокументОснования.УсловияПодключенияСетейАптек = ЗНАЧЕНИЕ(Перечисление.УсловияПодключенияСетейАптек.ФиксированныйСписок)
	|	И ММ.УсловияТиповМероприятий.ВидУсловияСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыУсловийСоглашений.Базовое)
	|	И ( (ММ.ДатаНачалаДействия МЕЖДУ &НачалоКвартала И &КонецКвартала
	|			ИЛИ ММ.ДатаОкончанияДействия МЕЖДУ &НачалоКвартала И &КонецКвартала)
	|		ИЛИ (ММ.ДатаНачалаДействия МЕЖДУ &НачалоСледующегоКвартала И &КонецСледующегоКвартала
	|			ИЛИ ММ.ДатаОкончанияДействия МЕЖДУ &НачалоСледующегоКвартала И &КонецСледующегоКвартала) )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Кандидаты.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	|ИЗ
	|	ВТ_Кандидаты КАК ВТ_Кандидаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Кандидаты.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ВТ_Кандидаты.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	|ИЗ
	|	ВТ_Кандидаты КАК ВТ_Кандидаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Кандидаты.Партнер КАК Производитель
	|ПОМЕСТИТЬ ВТ_Производители
	|ИЗ
	|	ВТ_Кандидаты КАК ВТ_Кандидаты
	|";
	
	Запрос.Параметры.Вставить("НачалоКвартала", НачалоКвартала);
	Запрос.Параметры.Вставить("КонецКвартала", КонецКвартала);
	Запрос.УстановитьПараметр("НачалоСледующегоКвартала", НачалоДня(НачалоСледующегоКвартала));
	Запрос.УстановитьПараметр("КонецСледующегоКвартала", КонецДня(КонецСледующегоКвартала));
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Протокол.Добавить(СтрШаблон(НСтр("ru = 'Обнаружено документов ММ в периоде: %1.'"), РезультатыЗапроса[0].Выгрузить()[0].Количество)); 
	КоличествоОбработаноУспешно = 0; 
	КоличествоОбработаноСОшибкой = 0;
	УдаленоАптек = 0;
	
	ВыборкаДатыОкончания = РезультатыЗапроса[1].Выбрать();
	ВыборкаДатыНачалаИОкончания = РезультатыЗапроса[2].Выбрать();
	#Если Сервер И НЕ Сервер Тогда
	    ВыборкаДатыНачалаИОкончания = Запрос.Выполнить().Выбрать();
	#КонецЕсли
	//Производители = РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("Партнер"); // Параметр заменен на ВТ_Производители.
	
	// Дат окончания у нас будет гарантированно не больше, чем интервалов "дата начала - дата окончания",
	// поэтому внешний цикл по датам окончания, а внутренний - по интервалам с датой окончания из внешнего цикла.
	// Во внешнем цикле готовим черные списки на каждую встретившуюся в кандидатах уникальную дату окончания ММ.
	//ПрямыеКонтрактыНаРазныеДаты = Новый Соответствие;
	Пока ВыборкаДатыОкончания.Следующий() Цикл
		
		ДатаОкончанияДействия = ВыборкаДатыОкончания.ДатаОкончанияДействия;
		
		// Получаем срез прямых контрактов на дату окончания мероприятия и только по интересующим нас производителям (из ММ-кандидатов).
		// Логика запроса взята из метода "УправлениеМероприятиями.ПолучитьСтруктуруДанныхПоКонтрактамПрямымИАСНА_ТЗ",
		// но с добавлением отбора по списку производителей.
		// TODO: текст запроса получения прямых контрактов вынести в какое-то одно единое место (и параметризировать помещение финального запроса в ВТ).
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МВТ;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрямыеКонтракты.Ссылка КАК Сеть,
		|	ПрямыеКонтракты.Производители КАК Производитель
		|ПОМЕСТИТЬ ВТ_ПрямыеКонтракты
		|ИЗ
		|	Справочник.Партнеры.ПрямыеКонтракты КАК ПрямыеКонтракты
		|ГДЕ
		|	ИСТИНА
		|	И НАЧАЛОПЕРИОДА(ПрямыеКонтракты.ДатаВнесения, ДЕНЬ) <= &ДатаОкончанияДействияМероприятия
		|	И КОНЕЦПЕРИОДА(ПрямыеКонтракты.ДатаОкончания, ДЕНЬ) >= &ДатаОкончанияДействияМероприятия
		|	И ПрямыеКонтракты.Производители.Производитель
		|	И НЕ ПрямыеКонтракты.Производители.ПометкаУдаления
		|	И ПрямыеКонтракты.Производители В
		|			(ВЫБРАТЬ
		|				П.Производитель
		|			ИЗ
		|				ВТ_Производители КАК П)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Производитель КАК Производитель,
		|	Аптеки.Ссылка КАК Аптека
		|ПОМЕСТИТЬ ВТ_АптекиЧерныйСписокПроизводителей
		|ИЗ
		|	ВТ_ПрямыеКонтракты КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Аптеки
		|		ПО Т.Сеть = Аптеки.Родитель
		|ГДЕ
		|	ИСТИНА
		|	И Аптеки.Аптека
		|	И НЕ Аптеки.ПометкаУдаления
		|";
		
		Запрос.УстановитьПараметр("ДатаОкончанияДействияМероприятия", ДатаОкончанияДействия);
		//Запрос.УстановитьПараметр("Производители", Производители);
		Запрос.Выполнить(); // Цель текущего запроса - сохранение черного списка в ВТ для многократного использования во вложенном цикле.
				
		// Готовим белые списки на каждый встретившийся в кандидатах уникальный интервал (дата начала - дата окончания ММ).
		ВыборкаДатыНачалаИОкончания.Сбросить();
		Пока ВыборкаДатыНачалаИОкончания.НайтиСледующий(ДатаОкончанияДействия, "ДатаОкончанияДействия") Цикл
			
			ДатаНачалаДействия = ВыборкаДатыНачалаИОкончания.ДатаНачалаДействия;
			
			// Получаем срез контрактов АСНА на даты начала и окончания мероприятия и только по интересующим нас производителям (из ММ-кандидатов).
			// Логика запроса взята из метода "УправлениеМероприятиями.ПолучитьСтруктуруДанныхПоКонтрактамПрямымИАСНА_ТЗ",
			// но с добавлением отбора по списку производителей.
			// TODO: текст запроса получения контрактов АСНА вынести в какое-то одно единое место.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МВТ;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрактыАСНА.Ссылка КАК Сеть,
			|	КонтрактыАСНА.Производители КАК Производитель
			|ПОМЕСТИТЬ ВТ_КонтрактыАСНА
			|ИЗ
			|	Справочник.Партнеры.АСНАОпен КАК КонтрактыАСНА
			|ГДЕ
			|	ИСТИНА
			|	И (ЛОЖЬ
			|			ИЛИ НАЧАЛОПЕРИОДА(КонтрактыАСНА.ДатаНачала, ДЕНЬ) <= &ДатаОкончанияДействияМероприятия
			|				И КОНЕЦПЕРИОДА(КонтрактыАСНА.ДатаОкончания, ДЕНЬ) >= &ДатаОкончанияДействияМероприятия
			|			ИЛИ НАЧАЛОПЕРИОДА(КонтрактыАСНА.ДатаНачала, ДЕНЬ) <= &ДатаНачалаДействияМероприятия
			|				И КОНЕЦПЕРИОДА(КонтрактыАСНА.ДатаОкончания, ДЕНЬ) >= &ДатаНачалаДействияМероприятия)
			|	И КонтрактыАСНА.Производители.Производитель
			|	И НЕ КонтрактыАСНА.Производители.ПометкаУдаления
			//|	И КонтрактыАСНА.Производители В(&Производители) // Нельзя фильтровать, иначе в список сетей (и, соответственно, аптек) у которых есть белый список войдет меньшее кол-во сетей, чем есть на самом деле (сеть должна считаться сетью с белым списком независимо от того, какие у нее производители в этом белом списке).
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.Производитель КАК Производитель,
			|	Аптеки.Ссылка КАК Аптека
			|ПОМЕСТИТЬ ВТ_АптекиБелыйСписокПроизводителей
			|ИЗ
			|	ВТ_КонтрактыАСНА КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Аптеки
			|		ПО Т.Сеть = Аптеки.Родитель
			|ГДЕ
			|	ИСТИНА
			|	И Аптеки.Аптека
			|	И НЕ Аптеки.ПометкаУдаления
			|";
			Запрос.УстановитьПараметр("ДатаНачалаДействияМероприятия", ДатаНачалаДействия);
			Запрос.УстановитьПараметр("ДатаОкончанияДействияМероприятия", ДатаОкончанияДействия);
			//Запрос.УстановитьПараметр("Производители", Производители);
			Запрос.Выполнить(); // Цель текущего запроса - сохранение белого списка в ВТ для использования в следующем запросе.
			
			// Каждый интервал (дата начала - дата окончания) включает в себя определенную порцию ММ-кандидатов.
			// Анализируем списки аптек этих ММ-кандидатов (самих кандидатов берем из МВТ самого первого запроса).
			// Для каждой аптеки каждого ММ-кандидата определяем:
			// 1. Задан ли для сети аптеки вообще белый список производителей (левое соединение с "ВТ_АптекиИзБелогоСписка").
			// 2. Если задан, то входит ли производитель из ММ в этот список (левое соединение с белым списком).
			// 3. Входит ли производитель ММ в черный список производителей (левое сооединение с черным списком).
			// И отбираем в каждом ММ (производителе) те аптеки, которых в нем быть не должно:
			// - производитель есть в черном списке (НЕ ЧерныйСписок.Производитель ЕСТЬ NULL)
			// или
			// - для сети назначен белый список (НЕ АптекиИзБелогоСписка.Аптека ЕСТЬ NULL)
			//   и производителя в нем нет (БелыйСписок.Производитель ЕСТЬ NULL)
			// .
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МВТ;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Аптека КАК Аптека
			|ПОМЕСТИТЬ ВТ_АптекиИзБелогоСписка
			|ИЗ
			|	ВТ_АптекиБелыйСписокПроизводителей КАК Т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АптекиММ.Ссылка КАК ММ,
			|	АптекиММ.Ссылка.Партнер КАК Производитель,
			|	АптекиММ.Партнер КАК Аптека,
			|	АптекиММ.Партнер.Код КАК КодАптеки,
			|	АптекиММ.Партнер.Родитель КАК Сеть,
			|	ВЫБОР
			|		КОГДА АптекиИзБелогоСписка.Аптека ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК СетьСБелымСписком,
			|	ВЫБОР
			|		КОГДА БелыйСписок.Производитель ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПроизводительВБеломСписке,
			|	ВЫБОР
			|		КОГДА ЧерныйСписок.Производитель ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПроизводительВЧерномСписке
			|ИЗ
			|	Документ.МаркетинговоеМероприятие.СписокАптек КАК АптекиММ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АптекиБелыйСписокПроизводителей КАК БелыйСписок
			|		ПО АптекиММ.Ссылка.Партнер = БелыйСписок.Производитель
			|			И АптекиММ.Партнер = БелыйСписок.Аптека
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АптекиЧерныйСписокПроизводителей КАК ЧерныйСписок
			|		ПО АптекиММ.Ссылка.Партнер = ЧерныйСписок.Производитель
			|			И АптекиММ.Партнер = ЧерныйСписок.Аптека
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АптекиИзБелогоСписка КАК АптекиИзБелогоСписка
			|		ПО АптекиММ.Партнер = АптекиИзБелогоСписка.Аптека
			|ГДЕ
			|	АптекиММ.Ссылка В
			|			(ВЫБРАТЬ
			|				ММ.Ссылка
			|			ИЗ
			|				ВТ_Кандидаты КАК ММ
			|			ГДЕ
			|				ММ.ДатаНачалаДействия = &ДатаНачалаДействияМероприятия
			|				И ММ.ДатаОкончанияДействия = &ДатаОкончанияДействияМероприятия)
			|	И (ЛОЖЬ
			|			ИЛИ НЕ ЧерныйСписок.Производитель ЕСТЬ NULL
			|			ИЛИ НЕ АптекиИзБелогоСписка.Аптека ЕСТЬ NULL
			|				И БелыйСписок.Производитель ЕСТЬ NULL)
			|ИТОГИ
			|	МАКСИМУМ(СетьСБелымСписком),
			|	МАКСИМУМ(ПроизводительВБеломСписке),
			|	МАКСИМУМ(ПроизводительВЧерномСписке)
			|ПО
			|	ММ,
			|	Сеть
			|";
			Запрос.УстановитьПараметр("ДатаНачалаДействияМероприятия", ДатаНачалаДействия);
			Запрос.УстановитьПараметр("ДатаОкончанияДействияМероприятия", ДатаОкончанияДействия);
			
			РезультатыЗапроса = Запрос.Выполнить();
			
			ВыборкаММ = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
			Пока ВыборкаММ.Следующий() Цикл
				
				МероприятиеСсылка = ВыборкаММ.ММ;
				
				// Детальный лог по каждому документу ММ.
				лЗаписьЛога = ОбменSQL.СоздатьЗаписьПротоколаОбмена(ВидРегламентнойОперации, Перечисления.НаправлениеОбмена.Импорт, МероприятиеСсылка);
				лДанныеДляОтчета = Новый Массив;
				лПротокол = Новый Массив;
				лУдаленоАптек = 0;
				лОтказ = Ложь;
				
				МероприятиеОбъект = МероприятиеСсылка.ПолучитьОбъект();
				#Если Сервер И НЕ Сервер Тогда
				    МероприятиеОбъект = Документы.АСНА_МаркетинговоеМероприятие.СоздатьДокумент();
				#КонецЕсли 
				МероприятиеОбъект.ОбменДанными.Загрузка = Истина; // По аналогии с обновлением динамических списков аптек мероприятий в ОМ "УправлениеМероприятиями.ОбновитьСписокАптекМероприятийПоУсловию()".
				АптекиТЧ = МероприятиеОбъект.СписокАптек;
				
				ВыборкаСеть = ВыборкаММ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				лПротокол.Добавить(НСтр("ru = 'Количество различных сетей, аптеки которых будут удалены: '") + ВыборкаСеть.Количество()); // Детальный лог.
				Пока ВыборкаСеть.Следующий() Цикл
					ВыборкаАптеки = ВыборкаСеть.Выбрать();
					Пока ВыборкаАптеки.Следующий() Цикл
						Аптека = ВыборкаАптеки.Аптека;
						АптекиТЧ.Удалить(АптекиТЧ.Найти(Аптека, "Партнер"));
						лУдаленоАптек = лУдаленоАптек + 1; // Детальный лог.
						лДанныеДляОтчета.Добавить(Новый Структура("Аптека, Код, Комментарий", Аптека, ВыборкаАптеки.КодАптеки, НСтр("ru = 'Аптека будет удалена из мероприятия.'"))); // Детальный лог.
					КонецЦикла;
				КонецЦикла; 
				
				Попытка
					МероприятиеОбъект.Записать();
					КоличествоОбработаноУспешно = КоличествоОбработаноУспешно + 1;
					УдаленоАптек = УдаленоАптек + лУдаленоАптек;
					лПротокол.Добавить(НСтр("ru = 'Мероприятие обработано успешно. Было удалено аптек: '") + лУдаленоАптек + "."); // Детальный лог.
				Исключение
					Отказ = Истина;
					ОписаниеОшибки = Логгер.ОписаниеОшибки_(ИнформацияОбОшибке());
					СообщениеОбОшибке = НСтр("ru = 'Не удалось обновить список аптек мероприятия по причине:'");
					СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + ОписаниеОшибки.ТекстОшибки;
					Логгер.Ошибка(ИмяСобытия, СообщениеОбОшибке, МероприятиеСсылка, МетаданныеРЗ);
					Ошибки.Добавить(СообщениеОбОшибке);
					КоличествоОбработаноСОшибкой = КоличествоОбработаноСОшибкой + 1;
					лОтказ = Истина; // Детальный лог.
					лПротокол.Добавить(СообщениеОбОшибке); // Детальный лог. 
				КонецПопытки;
				
				ОбменSQL.ЗафиксироватьВыполнениеОбменаВПротоколе(лЗаписьЛога, НЕ лОтказ, СтрСоединить(лПротокол, Символы.ПС), лДанныеДляОтчета); // Детальный лог.
				
			КонецЦикла; 
			
			// Подготовка МВТ к следующему проходу цикла.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МВТ;
			Запрос.Текст = 
			"УНИЧТОЖИТЬ ВТ_АптекиИзБелогоСписка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_АптекиБелыйСписокПроизводителей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_КонтрактыАСНА
			|";
			Запрос.Выполнить();
		
		КонецЦикла;
		
		// Подготовка МВТ к следующему проходу цикла.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МВТ;
		Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТ_АптекиЧерныйСписокПроизводителей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ПрямыеКонтракты
		|";
		Запрос.Выполнить();
		
	КонецЦикла;
	
	МВТ.Закрыть();
	
	Протокол.Добавить(
		СтрШаблон(
			НСтр("ru = 'Из них требовали актуализации: %1.
                  |Обработано мероприятий с ошибкой: %2.
                  |Обработано мероприятий успешно: %3.
                  |Всего удалено аптек из всех мероприятий: %4.'"),
			КоличествоОбработаноУспешно + КоличествоОбработаноСОшибкой,
			КоличествоОбработаноСОшибкой,
			КоличествоОбработаноУспешно,
			УдаленоАптек
		)
	); 
	
	// Завершающие действия (единая точка выхода из метода).
	ПротоколВыполнения = СтрСоединить(Протокол, Символы.ПС);
	Если Отказ Тогда
		
		СообщенияОбОшибках = СтрСоединить(Ошибки, Символы.ПС);
		
		ТекстСообщения = НСтр("ru = 'Обновление фикс. списков аптек мероприятий выполнено с ошибками:'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + СообщенияОбОшибках;
		Если НЕ ПустаяСтрока(ПротоколВыполнения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС + "---" + Символы.ПС + Символы.ПС + НСтр("ru = 'Протокол выполнения:'");
			ТекстСообщения = ТекстСообщения + Символы.ПС + ПротоколВыполнения;
		КонецЕсли;
		Логгер.Ошибка(ИмяСобытия, ТекстСообщения, , МетаданныеРЗ);
		
		Если ВызыватьИсключениеВСлучаеНеуспеха Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	
	Иначе
		// Пишем протокол в ЖР.
		Логгер.Информация(ИмяСобытия, ПротоколВыполнения, , МетаданныеРЗ);
		// Дополнительно выводим в сообщения пользователю, чтобы в консоли заданий можно было сразу увидеть протокол.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПротоколВыполнения);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

