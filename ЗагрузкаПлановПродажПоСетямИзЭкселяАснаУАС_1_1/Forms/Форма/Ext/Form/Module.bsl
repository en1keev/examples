
#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СброситьДанныеФормы(ЭтотОбъект);
	ИнициализироватьПараметрыЗагрузкиДанных();
			
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьИПрочитатьФайл(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоОшибокПроверкиДанныхНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если КоличествоОшибокПроверкиДанных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПечатнойФормы = "ОшибкиПроверкиДанных";
	ПредставлениеПечатнойФормы = НСтр("ru = 'Ошибки проверки данных'");
    ПоказатьТабличныйДокументКакПечатнуюФорму(ОшибкиПроверкиДанных, ИдентификаторПечатнойФормы, ПредставлениеПечатнойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоОшибочныхКлючейНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если КоличествоОшибокПоиска = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПечатнойФормы = "ОшибкиПоиска";
	ПредставлениеПечатнойФормы = НСтр("ru = 'Ошибки поиска'");
    ПоказатьТабличныйДокументКакПечатнуюФорму(ОшибкиПоиска, ИдентификаторПечатнойФормы, ПредставлениеПечатнойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоОшибокЗаписиДокументовНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если КоличествоОшибокЗаписиДокументов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПечатнойФормы = "ОшибкиЗаписиДокументов";
	ПредставлениеПечатнойФормы = НСтр("ru = 'Ошибки записи документов'");
    ПоказатьТабличныйДокументКакПечатнуюФорму(ОшибкиЗаписиДокументов, ИдентификаторПечатнойФормы, ПредставлениеПечатнойФормы);
	
КонецПроцедуры

#КонецОбласти 

#Область КомандыФормы

&НаКлиенте
Процедура ЗаполнитьНастройкамиПоУмолчанию(Команда)
	
	Для каждого Настройка Из Параметры.НастройкиЧтенияДанных Цикл
		ЭтотОбъект[Настройка.ИмяРеквизитаФормы] = Настройка.НомерКолонкиВФайле;		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИПрочитатьФайл(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
		
	ОО = Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтотОбъект);
	РежимДиалога = РежимДиалогаВыбораФайла.Открытие;
	
	ПараметрыДиалога = Новый Структура("Режим, МножественныйВыбор, Фильтр, ИндексФильтра, Заголовок, ПолноеИмяФайла");
	ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите файл с данными'");
	ПараметрыДиалога.МножественныйВыбор = Ложь;
	ПараметрыДиалога.Фильтр = НСтр("ru = 'Файлы XLSX (*.xlsx)|*.xlsx|Все файлы (*.*)|*'");
	ПараметрыДиалога.ИндексФильтра = 0;
	ПараметрыДиалога.ПолноеИмяФайла = ПутьКФайлу;
	
	//СтандартныеПодсистемыКлиент.ПоказатьПомещениеФайла(ОО, УникальныйИдентификатор, ПутьКФайлу, ПараметрыДиалога);
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалога);
	ЗаполнитьЗначенияСвойств(ДВФ, ПараметрыДиалога);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОО, ДВФ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	СброситьДанныеФормы(ЭтотОбъект);
	
	ПутьКФайлу = ВыбранныеФайлы[0];
	ОО = Новый ОписаниеОповещения("ПоместитьФайлНаСерверИОбработать", ЭтотОбъект);
	ОписаниеОповещенияПередНачалом = Новый ОписаниеОповещения("ПередНачаломПомещенияФайлаНаСервер", ЭтотОбъект);
	ОписаниеОповещенияОХодеВыполнения = Новый ОписаниеОповещения("ВПроцессеПомещенияФайлаНаСервер", ЭтотОбъект);
	НачатьПомещениеФайлаНаСервер(ОО, ОписаниеОповещенияОХодеВыполнения, ОписаниеОповещенияПередНачалом, , ПутьКФайлу, УникальныйИдентификатор); 
			
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлНаСерверИОбработать(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
	
	#Если Сервер И НЕ Сервер Тогда
	    ОписаниеПомещенногоФайла = Новый ОписаниеПомещенногоФайла;
	#КонецЕсли 
	Если ОписаниеПомещенногоФайла = Неопределено Или ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		Возврат;
	КонецЕсли;
		
	ВремяНачала = ТекущаяДата();
	ТекстСообщения = "" + ВремяНачала + ". " + НСтр("ru = 'Пакетное создание данных начато.'");
	Сообщить(ТекстСообщения);
		
	П = Новый Структура;
	П.Вставить("АдресХранилищаФайла", ОписаниеПомещенногоФайла.Адрес);
	ЗаполнитьАдресХранилищаФайлаОбработки(П);	
	
	ДлительнаяОперация = ПрочитатьФайлНаСервере(П);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВремяНачала", ВремяНачала);
	ОО = Новый ОписаниеОповещения("ПослеЗавершенияЗагрузкиДанных", ЭтотОбъект, ДополнительныеПараметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОО, ПараметрыОжидания);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияЗагрузкиДанных(Результат, ДополнительныеПараметры) Экспорт
	
	ВремяОкончания = ТекущаяДата();
	Длительность = ВремяОкончания - ДополнительныеПараметры.ВремяНачала;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + ВремяОкончания + ". " + НСтр("ru = 'Обработка файла завершена за: '") + Длительность + НСтр("ru = ' секунд.'"));
	
	ДлительнаяОперация = Неопределено;
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение "" + Результат.КраткоеПредставлениеОшибки + Символы.ПС + Результат.ПодробноеПредставлениеОшибки;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ОтобразитьПротокол(Результат);
		Состояние("Загрузка выполнена", , ,БиблиотекаКартинок.Успешно32);
		ПослеУспешнойЗагрузкиДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПротокол(Знач Результат)
	
	Элементы.ГруппаЛево.Видимость = Истина;
	
	Лог = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Протокол = СтрСоединить(Лог.Протокол, Символы.ПС);
	тзОшибкиПроверкиДанных = Лог.ОшибкиПроверкиДанных;
	тзОшибкиПоиска = Лог.ОшибкиПоиска;
	тзОшибкиЗаписиДокументов = Лог.ОшибкиЗаписиДокументов;
	КоличествоОшибокПроверкиДанных = тзОшибкиПроверкиДанных.Количество();
	КоличествоОшибокПоиска = тзОшибкиПоиска.Количество();
	КоличествоОшибокЗаписиДокументов = тзОшибкиЗаписиДокументов.Количество();
	
	КоличествоСозданныхДокументов = Лог.КоличествоСозданныхДокументов;
	КоличествоОбновленныхДокументов = Лог.КоличествоОбновленныхДокументов;
	КоличествоОшибокСоздания = Лог.КоличествоОшибокСоздания;
	КоличествоОшибокОбновления = Лог.КоличествоОшибокОбновления;
	
	Если КоличествоОшибокЗаписиДокументов > 0 Тогда
		Элементы.КоличествоОшибокЗаписиДокументов.Гиперссылка = Истина;
		Элементы.ДекорацияОшибокСозданияОбновления.Видимость = Истина;
		Элементы.ДекорацияОшибокСозданияОбновления.Заголовок = СтрШаблон(
			НСтр("ru = '(ошибок создания: %1, ошибок обновления: %2)'"),
			КоличествоОшибокСоздания,
			КоличествоОшибокОбновления
		);
	КонецЕсли;
	
	ОшибкиПроверкиДанных = ПреобразоватьТаблицуЗначенийВТабличныйДокумент(тзОшибкиПроверкиДанных);
	ОшибкиПоиска = ПреобразоватьТаблицуЗначенийВТабличныйДокумент(тзОшибкиПоиска);
	ОшибкиЗаписиДокументов = ПреобразоватьТаблицуЗначенийВТабличныйДокумент(тзОшибкиЗаписиДокументов);

КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ИнициализироватьПараметрыЗагрузкиДанных()
	
	// Эти настройки сохраняются между серверными вызовами через ключевой параметр формы "НастройкиЧтенияДанных"
	// и затем передаются в основную логику (модуль объекта) загрузки данных.
	// TODO: в перспективе сделать возможность их восстановления (через хранилище настроек формы и/или файл и/или таблицу БД),
	//       а текущую форму превратить в универсальную (единую для любых похожих загрузчиков).
	НастройкиЧтения = Новый ТаблицаЗначений;
	НастройкиЧтения.Колонки.Добавить("ИмяРеквизитаФормы");
	НастройкиЧтения.Колонки.Добавить("НомерКолонкиВФайле");
	НастройкиЧтения.Колонки.Добавить("ИмяКолонки");
	НастройкиЧтения.Колонки.Добавить("ТипЗначения");
	
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(0);
	// При проблемах считывания дат отключить типизацию колонок датой и реализовать проверку и преобразование строк к датам
	// во время поиска ошибок в ТЗ (в модуле объекта "ОтброситьОшибочныеСтроки").
	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	
	// Пояснения к логике работы настроек смотри в описании вызываемого метода / в подсказке к параметрам.
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_НаименованиеСклада", 5);
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_НаименованиеВидаПланаПродаж", 16);
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_КодННТ", 12);
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_НаименованиеСети", 3);
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_КоличествоМесяц1", 18, , ТипЧисло);
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_КоличествоМесяц2", 19, , ТипЧисло);
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_КоличествоМесяц3", 20, , ТипЧисло);
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_СуммаМесяц1", 21, , ТипЧисло);
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_СуммаМесяц2", 22, , ТипЧисло);
	ДобавитьНастройкуЧтения(НастройкиЧтения, "НомерКолонки_СуммаМесяц3", 23, , ТипЧисло);

	// Код вставки номеров столбцов в реквизиты формы будет иметь эффект только при первом (у каждого нового пользователя)
	// открытии формы и призван повысить удобство первичной настройки,
	// т.е. является шаблоном заполнения под актуальный (на момент создания обработки) входной файл.
	// После изменения пользователем любого из сохраняемых реквизитов формы
	// вставка значений здесь ниже уже не будет давать никакого эффекта, поскольку сохраненные значения реквизитов формы
	// будут подгружаться в поля формы каждый раз в обработчиках (Перед / ПриЗагрузкеДанныхИзНастроекНаСервере)
	// и, соответственно, перезатирать то, что здесь ниже задано.
	Для каждого Настройка Из НастройкиЧтения Цикл
		ЭтотОбъект[Настройка.ИмяРеквизитаФормы] = Настройка.НомерКолонкиВФайле;		
	КонецЦикла;
	
	Параметры.НастройкиЧтенияДанных = Новый ФиксированныйМассив(ОбщегоНазначения.ТаблицаЗначенийВМассив(НастройкиЧтения));

КонецПроцедуры

&НаСервере
Функция ПрочитатьФайлНаСервере(Знач ПараметрыВыполнения)
		
	// Входной файл, выбранный пользователем, передаем в длительные операции БСП не как путь,
	// а как содержимое, т.к. рабочий сервер, где будет запущено ФЗ, в общем случае каждый раз произвольный.
	ДД = ПолучитьИзВременногоХранилища(ПараметрыВыполнения.АдресХранилищаФайла);
	
	П = Новый Структура;
	П.Вставить("ДвоичныеДанныеИсходногоФайла", ДД);
	П.Вставить("НомерСтрокиСЗаголовками", НомерСтрокиСЗаголовками);
	П.Вставить("НачалоПервогоМесяца", НачалоМесяца(НачалоПервогоМесяца));
	
	// Заменяем номера колонок в настройках чтения значениями из полей формы.
	НастройкиЧтенияДанных = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(Новый	Массив(Параметры.НастройкиЧтенияДанных));
	Для каждого НастройкаЧтения Из НастройкиЧтенияДанных Цикл // См. метод "ИнициализироватьПараметрыЗагрузкиДанных".
		НастройкаЧтения.НомерКолонкиВФайле = ЭтотОбъект[НастройкаЧтения.ИмяРеквизитаФормы];
	КонецЦикла;
	П.Вставить("НастройкиЧтенияДанных", НастройкиЧтенияДанных);		
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Выполняется");
	Результат.Вставить("КраткоеПредставлениеОшибки", "");
	Результат.Вставить("ПодробноеПредставлениеОшибки", "");
	Результат.Вставить("АдресДополнительногоРезультата");
	
	// Для выполнения кода обработки в текущем сеансе (а не в ФЗ)
	// без необходимости запускать сеанс с параметром запуска "РежимОтладки".
	РежимОтладки = Ложь;
	
	ЗапущеноЗаданийВФайловойИБ = 0;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() И НЕ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданийВФайловойИБ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;
		
	Если РежимОтладки ИЛИ ОбщегоНазначенияКлиентСервер.РежимОтладки() ИЛИ ЗапущеноЗаданийВФайловойИБ > 0 Тогда
		
		// Если сеанс запущен с параметром запуска "РежимОтладки" и обработка открыта через "Файл - Открыть",
		// то выполняем код в текущем сеансе (для удобства отладки), а не в фоне.
		Результат.Вставить("АдресРезультата", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		Попытка
			ОбработкаОбъект.ЗагрузитьДанныеИзФайла(П, Результат.АдресРезультата);
			Результат.Статус = "Выполнено";
		Исключение
			Результат.Статус = "Ошибка";
			Результат.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	Иначе
		
		// Выполнение кода через длительные операции БСП.
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ПараметрыВыполнения", П);
		ПараметрыЗадания.Вставить("ИмяМетода", "ЗагрузитьДанныеИзФайла"); // Имя экспортного метода обработки, который будет вызываться через длительные операции БСП.
		ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", Истина);
		ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", ПараметрыВыполнения.ДополнительнаяОбработкаСсылка);
		Если ПараметрыЗадания.ДополнительнаяОбработкаСсылка = Неопределено Тогда
			
			// Обработка открыта через "Файл - Открыть".
			// В этом случае обвязка длительных операций ожидает получить на вход готовый путь к обработке на сервере,
			// а не ссылку на справочник доп. отчетов и обработок БСП.
			
			// Внимание: код потенциально может перестать работать, если в кластере будет больше одного рабочего сервера
			// (т.к. сеанс ФЗ может создаться не на том рабочем сервере, где выполняется текущий код создания файла).
			// Это некритично, т.к. возможность запуска обработки через "Файл - Открыть" поддержана только для удобства (процесса разработки и отладки).
			ДД = ПолучитьИзВременногоХранилища(ПараметрыВыполнения.АдресХранилищаФайлаОбработки);
			ПутьКФайлуНаСервере = ПолучитьИмяВременногоФайла("epf");
			ДД.Записать(ПутьКФайлуНаСервере);
			ПараметрыЗадания.Вставить("ИмяОбработки", ПутьКФайлуНаСервере);
			
		КонецЕсли;
		
		ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
		НаименованиеФоновогоЗадания = НСтр("ru = 'Пакетная загрузка корректировок бюджета из файла'");
		ИспользоватьДополнительноеВХ = Ложь; // Третий параметр не поддерживается в вызываемом методе "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки".
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, ВыполняемыйМетод, ПараметрыЗадания, НаименованиеФоновогоЗадания, ИспользоватьДополнительноеВХ);
		
		Результат.Вставить("ИдентификаторЗадания", РезультатФоновогоЗадания.ИдентификаторЗадания);
		Результат.Вставить("АдресРезультата", РезультатФоновогоЗадания.АдресХранилища);
		
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			Результат.Вставить("Статус", "Выполнено");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеУспешнойЗагрузкиДанных()
	
	// Любые завершающие действия, которые можно выполнить только с клиента.
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПланПродаж"));
	
КонецПроцедуры

#Область Служебные

// Добавляет настройку чтения данных из табличного документа,
// которая будет использоваться в основной логике загрузки данных (в модуле объекта).
//
// Параметры:
//  НастройкиЧтенияДанных - ТаблицаЗначений - Коллекция, куда добавляется настройка чтения конкретной колонки входящего файла (табличного документа).
//  ИмяРеквизитаФормы - Строка - Имя реквизита формы, служащего для задания значащих номеров колонок файла
//                               (из которых будет осуществляться чтение).
//  НомерКолонкиВФайле - Число - Указывается для удобства пользователя как преднастройка по умолчанию.
//  ИмяКолонки - Строка - Любое слово (строка), удовлетворяющее требованиям к именам колонок ТЗ.
//                        Если не указано, то образуется отсеканием фрагмента "НомерСтроки_" от имени реквизита формы.
//                        Колонка табличного документа с номером, указанным в предыдущем параметре,
//                        будет преобразовываться в колонку ТЗ с именем, указываемом в этом параметре.
//                        На это имя будет опираться прикладная логика загрузки данных (в модуле объекта).
//  ТипЗначения - ОписаниеТипов - Ожидаемый в колонке тип значения (для валидации значений ячеек колонки),
//                                в который будут преобразовываться значения колонки табличного документа.
//                                Если не указан, то строка.
//  TODO: РежимПоиска - Строка - для ссылочных объектов - режим поиска (по коду / наименованию / номеру / номеру + дате и т.д.).
//
&НаСервереБезКонтекста
Процедура ДобавитьНастройкуЧтения(НастройкиЧтенияДанных, Знач ИмяРеквизитаФормы, Знач НомерКолонкиВФайле = 0, Знач ИмяКолонки = "", Знач ТипЗначения = Неопределено)
	
	#Если Сервер И НЕ Сервер Тогда
	    НастройкиЧтенияДанных = Новый ТаблицаЗначений;
	#КонецЕсли
	
	Если ПустаяСтрока(ИмяКолонки) Тогда
		ИмяКолонки = СтрЗаменить(ИмяРеквизитаФормы, "НомерКолонки_", "");
	КонецЕсли;
		
	Настройка = НастройкиЧтенияДанных.Добавить();
	Настройка.ИмяРеквизитаФормы = ИмяРеквизитаФормы;
	Настройка.НомерКолонкиВФайле = НомерКолонкиВФайле;
	Настройка.ИмяКолонки = ИмяКолонки;
	Настройка.ТипЗначения = ТипЗначения;
	
КонецПроцедуры

// Реальная директива здесь - &НаКлиентеНаСервереБезКонтекста, остальные директивы нужны для контекстной подсказки.
#Если Сервер И НЕ Сервер Тогда
	&НаСервере
#Иначе
	&НаКлиентеНаСервереБезКонтекста
#КонецЕсли
Процедура СброситьДанныеФормы(Форма)
	
	#Если Сервер И НЕ Сервер Тогда
	    Форма = ЭтотОбъект;
	#КонецЕсли 
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаЛево.Видимость = Ложь;
	Элементы.ДекорацияОшибокСозданияОбновления.Видимость = Ложь;
	Элементы.КоличествоОшибокЗаписиДокументов.Гиперссылка = Ложь;
	Форма.Протокол = "";
	Форма.КоличествоОшибокПроверкиДанных = 0;
	Форма.КоличествоОшибокПоиска = 0;
	Форма.КоличествоСозданныхДокументов = 0;
	Форма.КоличествоОбновленныхДокументов = 0;
	Форма.КоличествоОшибокСоздания = 0;
	Форма.КоличествоОшибокОбновления = 0;
	Форма.ОшибкиПроверкиДанных = Неопределено;
	Форма.ОшибкиПоиска = Неопределено;
	Форма.ОшибкиЗаписиДокументов = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресХранилищаФайлаОбработки(П)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ИмяФайлаОбработки = ОбработкаОбъект.ИспользуемоеИмяФайла;
	ДополнительнаяОбработкаСсылка = Неопределено;
	Если СтрНайти(ИмяФайлаОбработки, "e1cib\tempstorage\") > 0 Тогда
		// Обработка подключена и открыта через БСП.
		ДополнительнаяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", ОбработкаОбъект.Метаданные().Имя);
	Иначе
		// Обработка открыта через "Файл - Открыть".
		// Такой режим поддержан для удобства разработки: чтобы иметь возможность быстрого запуска кода обработки
		// без необходимости загрузки обработки в справочник дополнительных отчетов и обработок БСП.
		ДД = Новый ДвоичныеДанные(ИмяФайлаОбработки);
		П.Вставить("АдресХранилищаФайлаОбработки", ПоместитьВоВременноеХранилище(ДД, УникальныйИдентификатор));
	КонецЕсли;
	// Это свойство обязательное всегда, т.к. обвязка длительных операций, выполняющая метод обработки в ФЗ,
	// опирается на него (при создании экземпляра обработки в сеансе ФЗ).
	П.Вставить("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломПомещенияФайлаНаСервер(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	
	//РазмерМб = ПомещаемыйФайл.Размер() / 1024 / 1024;
	//Если РазмерМб > 20 Тогда
	//	ПоказатьПредупреждение(, НСтр("ru = 'Процесс может длиться несколько минут'"), 5, НСтр("ru = 'Начато чтение файла'"));
	//КонецЕсли;
	ТекстСообщения = "" + ТекущаяДата() + ". " + НСтр("ru = 'Начато чтение файла.'");
	Сообщить(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ВПроцессеПомещенияФайлаНаСервер(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	
	Состояние(НСтр("ru = 'Чтение файла'"), Помещено, , БиблиотекаКартинок.Информация32);
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуЗначенийВТабличныйДокумент(Знач ТЗ, Знач ВыводитьЗаголовок = Истина) Экспорт
	
	#Если Сервер И НЕ Сервер Тогда
		ТЗ = Новый ТаблицаЗначений;
	#КонецЕсли
	
	ТабДок = Новый ТабличныйДокумент;
	Секция = ТабДок.ПолучитьОбласть("R1");
	СтартовыйНомерСтрокиДанных = 1;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	
	Если ВыводитьЗаголовок Тогда
		
		СтартовыйНомерСтрокиДанных = 2;
		
		ПорядковыйНомерКолонки = 1;
		Для каждого Колонка Из ТЗ.Колонки Цикл
			Область = Секция.Область("R1C"+Строка(ПорядковыйНомерКолонки));
			Область.Текст = ?(ПустаяСтрока(Колонка.Заголовок), Колонка.Имя, Колонка.Заголовок);
			ШиринаКолонки = Колонка.Ширина;
			Если ШиринаКолонки <> 0 Тогда
	        	Область.ШиринаКолонки = ШиринаКолонки;
			КонецЕсли;
			Область.Шрифт = Новый Шрифт(Область.Шрифт, , , Истина);
			Область.Обвести(Линия, Линия, Линия, Линия);
			ПорядковыйНомерКолонки = ПорядковыйНомерКолонки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Индекс = 0 По ТЗ.Количество()-1 Цикл 
		НомерСтроки = СтартовыйНомерСтрокиДанных + Индекс;
		ПорядковыйНомерКолонки = 1;
		Для каждого Колонка Из ТЗ.Колонки Цикл
  			Область = Секция.Область("R"+Формат(НомерСтроки, "ЧГ=")+"C"+Строка(ПорядковыйНомерКолонки));
			Область.Текст = ТЗ[Индекс][Колонка.Имя];
			Если НЕ ВыводитьЗаголовок Тогда // Если заголовок выводится, то ширина уже установлена ранее и нет смысла это делать для нижеследующих областей.
				ШиринаКолонки = Колонка.Ширина;
				Если ШиринаКолонки <> 0 Тогда
		        	Область.ШиринаКолонки = ШиринаКолонки;
				КонецЕсли;
			КонецЕсли;
			Область.Обвести(Линия, Линия, Линия, Линия);
			ПорядковыйНомерКолонки = ПорядковыйНомерКолонки + 1;
		КонецЦикла;
	КонецЦикла;
	ТабДок.Вывести(Секция);
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьТабличныйДокументКакПечатнуюФорму(ТабДок, ИдентификаторПечатнойФормы, ПредставлениеПечатнойФормы)
	
	Перем КоллекцияПечатныхФорм, ОбластиОбъектов, ПечатнаяФорма;
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = ПредставлениеПечатнойФормы;
	ПечатнаяФорма.ТабличныйДокумент = ТабДок;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИдентификаторПечатнойФормы;
	ОбластиОбъектов = Новый СписокЗначений;
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);

КонецПроцедуры

#КонецОбласти 