Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.1";
	//ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(Истина, Истина,
			НСтр("ru = 'Запись и чтение исходного файла на сервере'")
		)
	);
	
	// Добавим команду в таблицу
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ОбъектМД = Метаданные();
	Команда.Идентификатор = ОбъектМД.Имя;
	Команда.Представление = ОбъектМД.Синоним;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ЗагрузитьДанныеИзФайла(ПараметрыВыполнения, АдресРезультата) Экспорт
	
	ИмяСобытия = "ЗагрузкаПлановПродажПоСетямИзЭкселяАснаУАС.ЗагрузитьДанныеИзФайла";
	
	Если БезопасныйРежим() Тогда
		ТекстСообщения = НСтр("ru = 'Установлен безопасный режим. Работа обработки в таком режиме не поддерживается.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Протокол = Новый Массив; // Любые сообщения, сюда добавленные, по окончании склеиваются в многострочную строку и выводятся на клиенте.
	Лог = Новый Структура;
	Лог.Вставить("ИмяСобытия", ИмяСобытия);
	Лог.Вставить("Протокол", Протокол);
	
	// Во входном файле всегда должна присутствовать строка (шапка) с заголовками колонок,
	// предваряющая непосредственно строки с данными.
	// Это обязательное условие для преобразования ТД в ТЗ через построитель отчета.
	НомерСтрокиСЗаголовками = ПараметрыВыполнения.НомерСтрокиСЗаголовками;
	НастройкиЧтенияДанных = ПараметрыВыполнения.НастройкиЧтенияДанных;
	НачалоПервогоМесяца = ПараметрыВыполнения.НачалоПервогоМесяца;
	
	// Записываем входящие данные в файл.
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	ДД = ПараметрыВыполнения.ДвоичныеДанныеИсходногоФайла;
	ДД.Записать(ПолноеИмяФайла);
	
	ТекущийШаг = НСтр("ru = 'Шаг 1. Чтение файла в табличный документ.'");
	Лог.Протокол.Добавить(ТекущийШаг); 
	ДлительныеОперации.СообщитьПрогресс(, ТекущийШаг);
	
	ТабДок = Новый ТабличныйДокумент;
	// В зависимости от нужного способа чтения раскомментировать одну из двух строк.
	// Например, строковые значения входящего файла, состоящие из одних цифр (формат ячеек в файле при этом "Общий" или даже "Текстовый", а не числовой)
	// платформа 1С все равно будет читать в числа (при способе чтения = "Значение"), поэтому, если нам нужно получать считанные цифры как строку,
	// то читаем их только со способом чтения = "Текст" (поставить в файле формат ячеек на "Текстовый", увы, не поможет).
	// TODO: скорее всего придется читать файл в два экземпляра ТД (обоими способами) и обращаться к тому или иному экземпляру
	//       для каждой колонки отдельно (через параметризацию настроек чтения, которые задаются в модуле формы).
	СпособЧтения = СпособЧтенияЗначенийТабличногоДокумента.Текст;
	//СпособЧтения = СпособЧтенияЗначенийТабличногоДокумента.Значение;
	ТабДок.Прочитать(ПолноеИмяФайла, СпособЧтения);
	
	УдалитьФайлы(ПолноеИмяФайла);
	
	// В случае неуспеха внутри вызывается исключение (и дальнейший код не будет выполнен).
	БыстраяПроверкаТабличногоДокумента(ТабДок, НомерСтрокиСЗаголовками);
	
	// Преобразовываем ТД в ТЗ.
	
	ТекущийШаг = НСтр("ru = 'Шаг 2. Подготовка пространства данных.'");
	Лог.Протокол.Добавить(ТекущийШаг); 
	ДлительныеОперации.СообщитьПрогресс(, ТекущийШаг);
	Лог.Вставить("ТекущийШаг", ТекущийШаг);

	ТЗ = ПодготовитьТЗ(Лог, ТабДок, НастройкиЧтенияДанных, НомерСтрокиСЗаголовками); // Внутри добавляется прогресс для шага 3.
	#Если Сервер И НЕ Сервер Тогда
	    ТЗ = Новый ТаблицаЗначений;
	#КонецЕсли 
	ТабДок = Неопределено; // Для очистки памяти.
	
	Лог.Протокол.Добавить(СтрШаблон(НСтр("ru = 'Считано строк: %1.'"), ТЗ.Количество())); 
	
	ТекущийШаг = НСтр("ru = 'Шаг 4. Анализ данных.'");
	Лог.Протокол.Добавить(ТекущийШаг); 
	ДлительныеОперации.СообщитьПрогресс(, ТекущийШаг);
	Лог.Вставить("ТекущийШаг", ТекущийШаг);
	ОшибкиПроверкиДанных = Неопределено; // Заполняется внутри.
	ОшибкиПоиска = Неопределено; // Заполняется внутри.
	ТЗ = ОтброситьОшибочныеСтроки(Лог, ТЗ, ОшибкиПроверкиДанных, ОшибкиПоиска);
	
	Лог.Протокол.Добавить(СтрШаблон(НСтр("ru = 'Отброшено строк с ошибками: %1.'"), ОшибкиПроверкиДанных.Количество())); 
	
	ТекущийШаг = НСтр("ru = 'Шаг 5. Создание документов.'");
	Лог.Протокол.Добавить(ТекущийШаг); 
	ДлительныеОперации.СообщитьПрогресс(, ТекущийШаг);
	Лог.Вставить("ТекущийШаг", ТекущийШаг);
	Результат = СоздатьПланыПродаж(Лог, ТЗ, НачалоПервогоМесяца);
	
	Лог.Вставить("ОшибкиПроверкиДанных", ОшибкиПроверкиДанных);
	Лог.Вставить("ОшибкиПоиска", ОшибкиПоиска);
	Лог.Вставить("ОшибкиЗаписиДокументов", Результат.ОшибкиЗаписиДокументов);
	
	ПоместитьВоВременноеХранилище(Лог, АдресРезультата);
	
КонецПроцедуры

Процедура БыстраяПроверкаТабличногоДокумента(ТабДок, Знач НомерСтрокиСЗаголовками)
	
	#Если Сервер И НЕ Сервер Тогда
	    ТабДок = Новый ТабличныйДокумент;
	#КонецЕсли 
	
	ПоследняяКолонка = ТабДок.ШиринаТаблицы;
	ОбластьЯчеек = ТабДок.Область(НомерСтрокиСЗаголовками, 1, НомерСтрокиСЗаголовками, ПоследняяКолонка); 
	
	Попытка
		ТЗ = ПреобразоватьОбластьЯчеекВТаблицуЗначений(ОбластьЯчеек);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось обработать заголовки таблицы в строке №%1.
                               |Проверьте номер строки заголовков в настройках.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, НомерСтрокиСЗаголовками);
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

КонецПроцедуры

Функция ПодготовитьТЗ(Лог, ТабДок, НастройкиЧтенияДанных, НомерСтрокиСЗаголовками)
	
	#Если Сервер И НЕ Сервер Тогда
	    ТабДок = Новый ТабличныйДокумент;
		НастройкиЧтенияДанных = Новый ТаблицаЗначений;
	#КонецЕсли
	
	ТЗ = Новый ТаблицаЗначений;
	
	// Наполняем ТЗ пустыми строками, чтоб потом загрузить в нее данные по колонкам.
	ПоследняяСтрока = ТабДок.ВысотаТаблицы;

	//(( Прогресс.
	ВсегоИтераций = ПоследняяСтрока - НомерСтрокиСЗаголовками; // Пример: всего в файле 11 строк, заголовки - в строке 1, итого должно быть обработано 10 строк.
	ШагПрогресса = 100 / ВсегоИтераций;
	НомерИтерации = 0;
	//))
	Лог.Протокол.Добавить(
		СтрШаблон(
			НСтр("ru = 'Всего строк в файле: %1, будет обработано (с учетом заголовка в строке №%2): %3.'"),
			ПоследняяСтрока,
			НомерСтрокиСЗаголовками,
			ВсегоИтераций
		)
	); 
	
	Для й = НомерСтрокиСЗаголовками + 1 По ПоследняяСтрока Цикл
		
		//(( Прогресс.
		НомерИтерации = НомерИтерации + 1;
		Если НомерИтерации % 1000 = 0 Тогда
			ПроцентВыполнения = ШагПрогресса * НомерИтерации;
			ДлительныеОперации.СообщитьПрогресс(Окр(ПроцентВыполнения, 0), Лог.ТекущийШаг);
		КонецЕсли;
		//))
		
		ТЗ.Добавить();		
	КонецЦикла;
	
	Для каждого НастройкаЧтения Из НастройкиЧтенияДанных Цикл
		ТЗ.Колонки.Добавить(НастройкаЧтения.ИмяКолонки, НастройкаЧтения.ТипЗначения);
	КонецЦикла; 
	
	ТекущийШаг = НСтр("ru = 'Шаг 3. Обработка табличного документа.'");
	Лог.Протокол.Добавить(ТекущийШаг); 
	//(( Прогресс.
	ВсегоИтераций = НастройкиЧтенияДанных.Количество();
	ШагПрогресса = 100 / ВсегоИтераций;
	НомерИтерации = 0;
	//))
	
	Для каждого НастройкаЧтения Из НастройкиЧтенияДанных Цикл
		
		//(( Прогресс.
		НомерИтерации = НомерИтерации + 1;
		ПроцентВыполнения = ШагПрогресса * НомерИтерации;
		ДлительныеОперации.СообщитьПрогресс(Окр(ПроцентВыполнения, 0), Лог.ТекущийШаг);
		//))
		
		НомерКолонки = НастройкаЧтения.НомерКолонкиВФайле;
		ОбластьЯчеек = ТабДок.Область(НомерСтрокиСЗаголовками, НомерКолонки, ПоследняяСтрока, НомерКолонки); // Столбец со значениями. 
		ЗначенияКолонки = ПреобразоватьОбластьЯчеекВТаблицуЗначений(ОбластьЯчеек);
		#Если Сервер И НЕ Сервер Тогда
			ЗначенияКолонки = Новый ТаблицаЗначений;
		#КонецЕсли
		ТЗ.ЗагрузитьКолонку(ЗначенияКолонки.ВыгрузитьКолонку(0), НастройкаЧтения.ИмяКолонки);
				
	КонецЦикла;
	
	Возврат ТЗ;

КонецФункции

Функция ОтброситьОшибочныеСтроки(Лог, ТЗ, ТаблицаОшибок, ОшибкиПоиска)
	
	#Если Сервер И НЕ Сервер Тогда
		Лог = Новый Структура;
	    ТЗ = Новый ТаблицаЗначений;
	#КонецЕсли 
	
	// Разыменование ссылок.
	СсылочныеКолонки = Новый Структура;
	СсылочныеКолонки.Вставить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	СсылочныеКолонки.Вставить("ВидПлана", Новый ОписаниеТипов("СправочникСсылка.ВидыПланов"));
	СсылочныеКолонки.Вставить("Товар", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СсылочныеКолонки.Вставить("Сеть", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Для каждого Колонка Из СсылочныеКолонки Цикл
		ТЗ.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
	КонецЦикла; 
	// Ошибочные строки будут отмечены этим флагом (и пропущены при обработке).
	ТЗ.Колонки.Добавить("ЕстьОшибки", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("СписокОшибок");
	
	// Также складываем ошибочные ключи в отдельные коллекции, чтобы пользователь мог в свернутом виде их потом посмотреть (в форме обработки).
	ОшибкиПоиска = Новый ТаблицаЗначений;
	ОшибкиПоиска.Колонки.Добавить("ТипКлюча"); // "Сеть", "Товар", "ТипКорректировки" и т.д.
	ОшибкиПоиска.Колонки.Добавить("ПредставлениеТипаКлюча"); // "Сеть", "Товар", "Тип корректировки" и т.д.
	ОшибкиПоиска.Колонки.Добавить("КлючПоиска"); // Значение, по которому объект не был найден (или было найдено больше одного).
	ОшибкиПоиска.Колонки.Добавить("ОписаниеОшибки");
	
	// Склады.
	КлючиПоиска = ТЗ.ВыгрузитьКолонку("НаименованиеСклада");
	КлючиПоиска = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КлючиПоиска);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.Наименование КАК КлючПоиска
	|ИЗ
	|	Справочник.Склады КАК Т
	|ГДЕ
	|	Т.Наименование В(&КлючиПоиска)";
	Запрос.УстановитьПараметр("КлючиПоиска", КлючиПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	Склады = РезультатЗапроса.Выгрузить();
	
	// Виды плана продаж.
	КлючиПоиска = ТЗ.ВыгрузитьКолонку("НаименованиеВидаПланаПродаж");
	КлючиПоиска = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КлючиПоиска);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.Наименование КАК КлючПоиска
	|ИЗ
	|	Справочник.ВидыПланов КАК Т
	|ГДЕ
	|	Т.Наименование В(&КлючиПоиска)
	|	И Т.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродаж)";
	Запрос.УстановитьПараметр("КлючиПоиска", КлючиПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	ВидыПлановПродаж = РезультатЗапроса.Выгрузить();
	
	// Товары.
	КлючиПоиска = ТЗ.ВыгрузитьКолонку("КодННТ");
	КлючиПоиска = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КлючиПоиска);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.АСНА_КодТрейдФарма КАК КлючПоиска
	|ИЗ
	|	Справочник.Номенклатура КАК Т
	|ГДЕ
	|	Т.АСНА_КодТрейдФарма В(&КлючиПоиска)";
	Запрос.УстановитьПараметр("КлючиПоиска", КлючиПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	Товары = РезультатЗапроса.Выгрузить();
	
	// Сети.
	КлючиПоиска = ТЗ.ВыгрузитьКолонку("НаименованиеСети");
	КлючиПоиска = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КлючиПоиска);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.Наименование КАК КлючПоиска
	|ИЗ
	|	Справочник.Партнеры КАК Т
	|ГДЕ ИСТИНА
	|	И Т.Сеть
	|	И Т.Наименование В(&КлючиПоиска)
	|	И НЕ Т.ПометкаУдаления
	|";
	Запрос.УстановитьПараметр("КлючиПоиска", КлючиПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	Сети = РезультатЗапроса.Выгрузить();
	
	//(( Прогресс.
	ВсегоИтераций = ТЗ.Количество();
	ШагПрогресса = 100 / ВсегоИтераций;
	НомерИтерации = 0;
	//))
	
	// Отмечаем в исходной ТЗ ошибочные строки (с хотя бы одним ненайденным ссылочным ключом или пустым значением в обязательной колонке примитивного типа),
	// а также заполняем найденные ссылки.	
	Для каждого СтрокаТЗ Из ТЗ Цикл
		
		//(( Прогресс.
		НомерИтерации = НомерИтерации + 1;
		Если НомерИтерации % 1000 = 0 Тогда
			ПроцентВыполнения = ШагПрогресса * НомерИтерации;
			ДлительныеОперации.СообщитьПрогресс(Окр(ПроцентВыполнения, 0), Лог.ТекущийШаг);
		КонецЕсли;
		//))
				
		Отказ = Ложь;
		СписокОшибокСтроки = Новый Массив;
		
		// Контролируемые колонки (как ссылочные, так и примитивные) для каждой конкретной строки могут быть свои (зависеть от значений в других колонках),
		// но, тем не менее, почти всегда есть общие колонки, которые должны быть заполнены во входном файле строго (безусловно).
		// Безусловно обязательные ссылочные колонки проверяются одной строкой ("НайтиОбязательныйОбъектПоКлючу") с передачей туда флага Отказа.
		// Результат этого метода можно не получать (использовать его как процедуру), если на эту ссылочную колонку дальнейшая логика не опирается.
		
		// Склад.
		ОписаниеОбъекта = Новый Структура("Имя, Представление", "Склад");
		ОбластьПоиска = Склады;
		КлючПоиска = СтрокаТЗ.НаименованиеСклада;
		ИмяКолонкиПриемника = "Склад"; // Куда в строке ТЗ сохранить найденный объект.
		НайтиОбязательныйОбъектПоКлючу(ОбластьПоиска, КлючПоиска, ИмяКолонкиПриемника, СтрокаТЗ, Отказ, СписокОшибокСтроки, ОписаниеОбъекта, ОшибкиПоиска);
		
		// Вид плана продаж.
		ОписаниеОбъекта = Новый Структура("Имя, Представление", "ВидПланаПродаж", НСтр("ru = 'Вид плана продаж'"));
		ОбластьПоиска = ВидыПлановПродаж;
		КлючПоиска = СтрокаТЗ.НаименованиеВидаПланаПродаж;
		ИмяКолонкиПриемника = "ВидПлана"; // Куда в строке ТЗ сохранить найденный объект.
		НайтиОбязательныйОбъектПоКлючу(ОбластьПоиска, КлючПоиска, ИмяКолонкиПриемника, СтрокаТЗ, Отказ, СписокОшибокСтроки, ОписаниеОбъекта, ОшибкиПоиска);
		
		// Товар.
		ОписаниеОбъекта = Новый Структура("Имя, Представление", "Товар");
		ОбластьПоиска = Товары;
		КлючПоиска = СтрокаТЗ.КодННТ;
		ИмяКолонкиПриемника = "Товар"; // Куда в строке ТЗ сохранить найденный объект.
		НайтиОбязательныйОбъектПоКлючу(ОбластьПоиска, КлючПоиска, ИмяКолонкиПриемника, СтрокаТЗ, Отказ, СписокОшибокСтроки, ОписаниеОбъекта, ОшибкиПоиска);
		
		// Сеть.
		ОписаниеОбъекта = Новый Структура("Имя, Представление", "Сеть");
		ОбластьПоиска = Сети;
		КлючПоиска = СтрокаТЗ.НаименованиеСети;
		ИмяКолонкиПриемника = "Сеть"; // Куда в строке ТЗ сохранить найденный объект.
		НайтиОбязательныйОбъектПоКлючу(ОбластьПоиска, КлючПоиска, ИмяКолонкиПриемника, СтрокаТЗ, Отказ, СписокОшибокСтроки, ОписаниеОбъекта, ОшибкиПоиска);
		
		// Вердикт по строке ТЗ.
		Если Отказ Тогда
			СтрокаТЗ.ЕстьОшибки = Истина;
			СтрокаТЗ.СписокОшибок = СтрСоединить(СписокОшибокСтроки, Символы.ПС);
		КонецЕсли;
		
	КонецЦикла; 
	
	ВсеКолонки = Новый Массив;
	Для каждого Колонка Из ОшибкиПоиска.Колонки Цикл
		ВсеКолонки.Добавить(Колонка.Имя);
	КонецЦикла;
	ВсеКолонки = СтрСоединить(ВсеКолонки, ",");
	ОшибкиПоиска.Свернуть(ВсеКолонки); // Останутся только уникальные ошибки.
	ОшибкиПоиска.Сортировать("ТипКлюча, ОписаниеОшибки");
	
	О = Новый Структура("ЕстьОшибки", Истина);
	ТаблицаОшибок = ТЗ.Скопировать(О);
	// Добавленные ранее ссылочные колонки нам в этой таблице не нужны.
	Для каждого Колонка Из СсылочныеКолонки Цикл
		ТаблицаОшибок.Колонки.Удалить(Колонка.Ключ);
	КонецЦикла; 
	
	О = Новый Структура("ЕстьОшибки", Ложь);
	ТаблицаДляДальнейшейОбработки = ТЗ.Скопировать(О, "Склад, ВидПлана, Товар, Сеть, КоличествоМесяц1, КоличествоМесяц2, КоличествоМесяц3, СуммаМесяц1, СуммаМесяц2, СуммаМесяц3");
	Возврат ТаблицаДляДальнейшейОбработки;
	
КонецФункции

Функция СоздатьПланыПродаж(Лог, ТЗ, НачалоПервогоМесяца)
	
	#Если Сервер И НЕ Сервер Тогда
		Лог = Новый Структура;
	    ТЗ = Новый ТаблицаЗначений;
	#КонецЕсли 
	
	////(( Раскомментировать для пропуска шага (для возможности отладки предыдущих шагов - этапа валидации и поиска ошибок).
	//Лог.Вставить("КоличествоСозданныхДокументов", 0);
	//Лог.Вставить("КоличествоОбновленныхДокументов", 0);
	//Лог.Вставить("КоличествоОшибокСоздания", 0);
	//Лог.Вставить("КоличествоОшибокОбновления", 0);
	//Результат = Новый Структура("ОшибкиЗаписиДокументов", Новый ТаблицаЗначений);
	//Возврат Результат;
	////))
	
	ДокументыКПроведению = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Склад,
	|	Т.ВидПлана,
	|	Т.Товар,
	|	ВЫРАЗИТЬ(Т.Сеть КАК Справочник.Партнеры) КАК Сеть,
	|	Т.КоличествоМесяц1,
	|	Т.КоличествоМесяц2,
	|	Т.КоличествоМесяц3,
	|	Т.СуммаМесяц1,
	|	Т.СуммаМесяц2,
	|	Т.СуммаМесяц3
	|ПОМЕСТИТЬ ВТ_ПрошедшиеПроверку
	|ИЗ
	|	&ТЗ КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	Т.ВидПлана КАК ВидПлана,
	|	Т.Сеть.АСНА_МенеджерСопровождения КАК Менеджер,
	|	Т.Товар,
	|	Т.Сеть,
	|	Т.КоличествоМесяц1,
	|	Т.КоличествоМесяц2,
	|	Т.КоличествоМесяц3,
	|	Т.СуммаМесяц1,
	|	Т.СуммаМесяц2,
	|	Т.СуммаМесяц3
	|ИЗ
	|	ВТ_ПрошедшиеПроверку КАК Т
	|ИТОГИ ПО
	|	Склад,
	|	ВидПлана,
	|	Т.Сеть.АСНА_МенеджерСопровождения КАК Менеджер";
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	РезультатЗапроса = Запрос.Выполнить();
	
	//(( Прогресс.
	ВсегоИтераций = ТЗ.Количество();
	Если ВсегоИтераций = 0 Тогда
		ВсегоИтераций = 1
	КонецЕсли;
	ШагПрогресса = 100 / ВсегоИтераций;
	НомерИтерации = 0;
	//))
	
	ВыборкаСклады = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклады.Следующий() Цикл
		ВыборкаВидыПлана = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидыПлана.Следующий() Цикл
			ВыборкаМенеджеры = ВыборкаВидыПлана.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаМенеджеры.Следующий() Цикл
				
				Док1 = СоздатьПланПродажНаОдинМесяц(НачалоПервогоМесяца, ВыборкаСклады.Склад, ВыборкаВидыПлана.ВидПлана, "Утвержден");
				Док2 = СоздатьПланПродажНаОдинМесяц(ДобавитьМесяц(НачалоПервогоМесяца, 1), ВыборкаСклады.Склад, ВыборкаВидыПлана.ВидПлана, "НаУтверждении");
				Док3 = СоздатьПланПродажНаОдинМесяц(ДобавитьМесяц(НачалоПервогоМесяца, 2), ВыборкаСклады.Склад, ВыборкаВидыПлана.ВидПлана, "НаУтверждении");
				#Если Сервер И НЕ Сервер Тогда
					Док1 = Документы.ПланПродаж.СоздатьДокумент();
					Док2 = Документы.ПланПродаж.СоздатьДокумент();
					Док3 = Документы.ПланПродаж.СоздатьДокумент();
				#КонецЕсли 
				
				// m.enikeev@asna.ru 2021.10.20 CRM-675
				Док1.Менеджер = ВыборкаМенеджеры.Менеджер;
				Док2.Менеджер = ВыборкаМенеджеры.Менеджер;
				Док3.Менеджер = ВыборкаМенеджеры.Менеджер;
				// Конец m.enikeev@asna.ru 2021.10.20
				
				ТЧ1 = Док1.Товары;
				ТЧ2 = Док2.Товары;
				ТЧ3 = Док3.Товары;
				
				Выборка = ВыборкаМенеджеры.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					//(( Прогресс.
					НомерИтерации = НомерИтерации + 1;
					Если НомерИтерации % 1000 = 0 Тогда
						ПроцентВыполнения = ШагПрогресса * НомерИтерации;
						ДлительныеОперации.СообщитьПрогресс(Окр(ПроцентВыполнения, 0), Лог.ТекущийШаг);
					КонецЕсли;
					//))
					
					Товар = Выборка.Товар;
					Сеть = Выборка.Сеть;
					
					Кол1 = Выборка.КоличествоМесяц1;
					Кол2 = Выборка.КоличествоМесяц2;
					Кол3 = Выборка.КоличествоМесяц3;
					Сумма1 = Выборка.СуммаМесяц1;
					Сумма2 = Выборка.СуммаМесяц2;
					Сумма3 = Выборка.СуммаМесяц3;
					Если Кол1 > 0 Тогда
						ДобавитьСтрокуТЧ(ТЧ1, Товар, Сеть, Кол1, Сумма1);
					КонецЕсли;
					Если Кол2 > 0 Тогда
						ДобавитьСтрокуТЧ(ТЧ2, Товар, Сеть, Кол2, Сумма2);
					КонецЕсли;
					Если Кол3 > 0 Тогда
						ДобавитьСтрокуТЧ(ТЧ3, Товар, Сеть, Кол3, Сумма3);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТЧ1.Количество() > 0 Тогда
					ДокументыКПроведению.Добавить(Док1);
				КонецЕсли;
				Если ТЧ2.Количество() > 0 Тогда
					ДокументыКПроведению.Добавить(Док2);
				КонецЕсли;
				Если ТЧ3.Количество() > 0 Тогда
					ДокументыКПроведению.Добавить(Док3);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
		
	// Удаление всех предыдущих сообщений
	// (могут накапливаться внутри "СоздатьПланПродажНаОдинМесяц"
	//  в результате вызова метода "УстановитьСтатус").
	ПолучитьСообщенияПользователю(Истина);
	
	ТекущийШаг = НСтр("ru = 'Шаг 6. Проведение документов.'");
	Лог.Протокол.Добавить(ТекущийШаг); 
	ДлительныеОперации.СообщитьПрогресс(, ТекущийШаг);
	Лог.Вставить("ТекущийШаг", ТекущийШаг);
		
	Лог.Протокол.Добавить(СтрШаблон(НСтр("ru = 'Кол-во документов к проведению: %1.'"), ДокументыКПроведению.Количество())); 
	
	Результат = ПровестиДокументы(Лог, ДокументыКПроведению);	
	Возврат Результат;

КонецФункции

#Область СлужебныеМетоды
	
Функция ПреобразоватьОбластьЯчеекВТаблицуЗначений(ОбластьЯчеек)
	
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);  
	ПостроительОтчета = Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	
	ТЗ = ПостроительОтчета.Результат.Выгрузить();
	Возврат ТЗ;

КонецФункции

Процедура ДобавитьСтрокуТЧ(ТЧ, Товар, Партнер, КоличествоУпаковок, Сумма)
	
	#Если Сервер И НЕ Сервер Тогда
	    ТЧ = Документы.ПланПродаж.СоздатьДокумент().Товары;
	#КонецЕсли 
	СтрокаТЧ = ТЧ.Добавить();
	СтрокаТЧ.Номенклатура = Товар;
	СтрокаТЧ.Партнер = Партнер;
	СтрокаТЧ.КоличествоУпаковок = КоличествоУпаковок;
	СтрокаТЧ.Сумма = Сумма;

КонецПроцедуры

Функция СоздатьПланПродажНаОдинМесяц(НачалоПериода, Склад, ВидПлана, Статус)
	
	ДокументОбъект = Документы.ПланПродаж.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Склад = Склад;
	ДокументОбъект.ВидПлана = ВидПлана;
	ДокументОбъект.НачалоПериода = НачалоПериода;
	// Побочные реквизиты.
	ДокументОбъект.Сценарий = ДокументОбъект.ВидПлана.Владелец;
	ДокументОбъект.Периодичность = ДокументОбъект.Сценарий.Периодичность;
	Если ДокументОбъект.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ДокументОбъект.ОкончаниеПериода = КонецМесяца(ДокументОбъект.НачалоПериода);
	КонецЕсли;
	ДокументОбъект.Валюта = ДокументОбъект.Сценарий.Валюта;
	ДокументОбъект.ПланироватьПоСумме = ДокументОбъект.Сценарий.ПланПродажПланироватьПоСумме;
	ДокументОбъект.КроссТаблица = Истина;
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();

	ДокументОбъект.УстановитьСтатус(Статус, Неопределено);
	
	Возврат ДокументОбъект;

КонецФункции

// Выполняет попытку проведения документов.
//
// Параметры:
//	Документы - Массив - документы-объекты (не ссылки), которые необходимо провести.
//
// Возвращаемое значение:
//	Массив - массив структур с полями:
//   КлючОбъекта - Структура - ключевые поля документа, который не удалось провести;
//   ОписаниеОшибки - текст описания ошибки при проведении.
//
Функция ПровестиДокументы(Лог, ДокументыДляПроведения)
	
	#Если Сервер И НЕ Сервер Тогда
	    Лог = Новый Структура;
		ДокументыДляПроведения = Новый Массив;
	#КонецЕсли
	
	ИмяСобытия = "ЗагрузкаПлановПродажПоСетямИзЭкселяАснаУАС.ПровестиДокументы";
	
	// В зависимости от возможности проведения документа в метаданных конфигурации раскомментировать одну из двух строк.
	// Код не поддерживает присутствие во входящем массиве документов разных типов, если они отличаются свойством "Разрешить проведение".
	//РежимЗаписи = РежимЗаписиДокумента.Запись;
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	НепроведенныеДокументы = Новый ТаблицаЗначений;
	НепроведенныеДокументы.Колонки.Добавить("Номер"); // По его заполненности пользователь может отличать неудачную попытку создания нового документа от неудачной попытки обновления существующего.
	НепроведенныеДокументы.Колонки.Добавить("Склад");
	НепроведенныеДокументы.Колонки.Добавить("ВидПлана");
	НепроведенныеДокументы.Колонки.Добавить("НачалоПериода");
	НепроведенныеДокументы.Колонки.Добавить("ОписаниеОшибки");
	
	//(( Прогресс.
	ВсегоИтераций = ДокументыДляПроведения.Количество();
	Если ВсегоИтераций = 0 Тогда
		ВсегоИтераций = 1
	КонецЕсли;
	ШагПрогресса = 100 / ВсегоИтераций;
	НомерИтерации = 0;
	//))
	
	КоличествоСозданныхДокументов = 0;
	КоличествоОбновленныхДокументов = 0;
	КоличествоОшибокСоздания = 0;
	КоличествоОшибокОбновления = 0;
	Для Каждого ДокументОбъект Из ДокументыДляПроведения Цикл
		
		#Если Сервер И НЕ Сервер Тогда
		    ДокументОбъект = Документы.ПланПродаж.СоздатьДокумент();
		#КонецЕсли
		
		//(( Прогресс.
		НомерИтерации = НомерИтерации + 1;
		// Каждые 10, т.к. при полной загрузке файла на квартал ожидаем, что документов будет не меньше тысячи, а проценты округляем до целого.
		Если НомерИтерации % 10 = 0 Тогда
			ПроцентВыполнения = ШагПрогресса * НомерИтерации;
			ДлительныеОперации.СообщитьПрогресс(Окр(ПроцентВыполнения, 0), Лог.ТекущийШаг);
		КонецЕсли;
		//))
		
		ЭтоОбновление = Ложь;
		Если НЕ ДокументОбъект.ЭтоНовый() Тогда
			ЭтоОбновление = Истина;
		КонецЕсли;
		
		//(( Дозаполнение реквизитов.
		ТЧ = ДокументОбъект.Товары;
		
		//// Менеджера берем из родителя (сети) аптеки первой строки ТЧ (реквизит сети "АСНА_МенеджерСопровождения").
		//ДокументОбъект.Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТЧ[0].Партнер, "Родитель.АСНА_МенеджерСопровождения");
		
		// Кол-во единиц (логика взята из модуля формы документа).
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
		СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТЧ, СтруктураДействий, КэшированныеЗначения);
		//))
		
		ВыполненоУспешно = Ложь;
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			Попытка
				ДокументОбъект.Записать(РежимЗаписи, РежимПроведения);
				ВыполненоУспешно = Истина;
			Исключение
				ОписаниеОшибки = АСНА_Логгер.ОписаниеОшибки_(ИнформацияОбОшибке());
				ТекстОшибки = НСтр("ru = 'Ошибка проведения:'") + Символы.ПС + ОписаниеОшибки.ТекстОшибки;
				АСНА_Логгер.Ошибка(ИмяСобытия, ТекстОшибки,	ДокументОбъект.Ссылка); 
			КонецПопытки;
		Иначе
			ТекстОшибки = НСтр("ru = 'Поля документа не заполнены.'");
			// Сообщения пользователю.
			ПолучатьСообщенияПользователю = Истина;
			ОчищатьСообщенияПользователю = Истина;
			НумероватьСообщенияПользователю = Истина;
			
			КоличествоСообщений = 0;
			СообщенияПользователюСтрокой = Новый Массив;
			Если ПолучатьСообщенияПользователю Тогда
				СообщенияПользователю = ПолучитьСообщенияПользователю(ОчищатьСообщенияПользователю);
				КоличествоСообщений = СообщенияПользователю.Количество();
				НомерСообщения = 0;
				Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
					ТекстСообщения = СообщениеПользователю.Текст;
					Если НумероватьСообщенияПользователю Тогда
						НомерСообщения = НомерСообщения + 1;
						ТекстСообщения = XMLСтрока(НомерСообщения) + ". " + ТекстСообщения;
					КонецЕсли;
					СообщенияПользователюСтрокой.Добавить(ТекстСообщения);
				КонецЦикла;
			КонецЕсли;
			
			СообщенияПользователюСтрокой = СтрСоединить(СообщенияПользователюСтрокой, Символы.ПС);
			
			СообщенияПользователюШапка = НСтр("ru = 'Сообщения пользователю: '") + XMLСтрока(КоличествоСообщений); 
			Если КоличествоСообщений = 0 Тогда
				СообщенияПользователюШапка = СообщенияПользователюШапка + " " + НСтр("ru = '(отсутствуют).'")
			Иначе
				СообщенияПользователюШапка = СообщенияПользователюШапка + " " + НСтр("ru = '(приведены ниже).'");
				СообщенияПользователюШапка = СообщенияПользователюШапка + Символы.ПС + СообщенияПользователюСтрокой;
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + Символы.ПС + СообщенияПользователюШапка;
		КонецЕсли;
		
		Если ВыполненоУспешно Тогда
			Если ЭтоОбновление Тогда
				КоличествоОбновленныхДокументов = КоличествоОбновленныхДокументов + 1;
			Иначе
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
			КонецЕсли;
		Иначе
			СтрокаОшибки = НепроведенныеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, ДокументОбъект);
			СтрокаОшибки.ОписаниеОшибки = ТекстОшибки;
			Если ЭтоОбновление Тогда
				КоличествоОшибокОбновления = КоличествоОшибокОбновления + 1;
			Иначе
				КоличествоОшибокСоздания = КоличествоОшибокСоздания + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Лог.Вставить("КоличествоОшибокСоздания", КоличествоОшибокСоздания);
	Лог.Вставить("КоличествоОшибокОбновления", КоличествоОшибокОбновления);
	Лог.Вставить("КоличествоСозданныхДокументов", КоличествоСозданныхДокументов);
	Лог.Вставить("КоличествоОбновленныхДокументов", КоличествоОбновленныхДокументов);
	КоличествоУспешноЗаписанныхДокументов = КоличествоСозданныхДокументов + КоличествоОбновленныхДокументов;
	Лог.Вставить("КоличествоУспешноЗаписанныхДокументов", КоличествоУспешноЗаписанныхДокументов);
	Лог.Протокол.Добавить(
		СтрШаблон(
			НСтр("ru = 'Из них проведено успешно: %1,
				|проведено с ошибкой: %2.'"),
			КоличествоУспешноЗаписанныхДокументов,
			НепроведенныеДокументы.Количество()
		)
	); 
	
	Результат = Новый Структура("ОшибкиЗаписиДокументов", НепроведенныеДокументы);
	Возврат Результат;
	
КонецФункции 

// Ищет ссылочный объект в области поиска по ключу. В случае неуспеха взводит отказ и логирует ошибку.
// Использовать метод для разыменования ссылочных колонок.
//
// Параметры:
//  ОбластьПоиска- ТаблицаЗначений - Должна содержать колонки "Ссылка" и "КлючПоиска".
//  КлючПоиска - Строка, Число - Значение, по которому происходит отбор строк области поиска.
//  ИмяКолонкиПриемника - Строка - Имя колонки строки ТЗ (следующий параметр), куда в случае успеха вставляется найденный объект.
//  СтрокаТЗ - СтрокаТаблицыЗначений - В ее колонку "ИмяКолонкиПриемника" в случае успеха будет помещен найденный объект.
//  Отказ - Булево - Если объект не найден (либо по ключу найдено больше одного), то взводится в Истину.
//  СписокОшибокСтроки - Массив - Для логирования (накопления) текстов ошибок в пределах одной строки ТЗ.
//  ОписаниеОбъекта - Структура - По именам ошибочных объектов выполняется агрегирование всех ошибок и вывод списка ошибочных объектов пользователю.
//                                Должна содержать свойства:
//   *Имя - Строка - Имя ошибочного объекта (который по ключу не нашелся).
//   *Представление - Строка - Представление ошибочного объекта. Если не заполнено, то берется из имени.
//  ОшибкиПоиска - ТаблицаЗначений - Используется для сквозного логирования (накопления) ошибок в пределах всей ТЗ
//                                   (всего входного файла).
//
// Возвращаемое значение:
//  ЛюбаяСсылка, Неопределено - Ссылка на найденный по ключу объект (в случае успеха) или Неопределено (в случае неуспеха).
//
Функция НайтиОбязательныйОбъектПоКлючу(ОбластьПоиска, КлючПоиска, ИмяКолонкиПриемника, СтрокаТЗ, Отказ, СписокОшибокСтроки, ОписаниеОбъекта, ОшибкиПоиска)
		
	Если НЕ ЗначениеЗаполнено(ОписаниеОбъекта.Представление) Тогда
		ОписаниеОбъекта.Представление = ОписаниеОбъекта.Имя;
	КонецЕсли;
	
	РезультатПоиска = НайтиОбъектПоКлючу(ОбластьПоиска, КлючПоиска, ИмяКолонкиПриемника, СтрокаТЗ);
	
	Если НЕ РезультатПоиска.Успех Тогда
		ОписаниеОшибки = РезультатПоиска.ОписаниеОшибки;
		ЗалогироватьОшибкуСтроки(СписокОшибокСтроки, ОписаниеОбъекта.Представление + ": " + ОписаниеОшибки, Отказ);
		ЗалогироватьОшибкуПоиска(ОшибкиПоиска, ОписаниеОбъекта, КлючПоиска, ОписаниеОшибки);
	КонецЕсли;
	
	Возврат РезультатПоиска.НайденныйОбъект;

КонецФункции

// Ищет ссылочный объект в области поиска по ключу
// Параметры аналогичны одноименным параметрам "родительского" метода "НайтиОбязательныйОбъектПоКлючу".
//
// Возвращаемое значение:
//  Структура - С полями:
//   *Успех - Булево - Истина, если объект по ключу найден. Ложь, если не найден (или найдено больше одного).
//   *НайденныйОбъект - ЛюбаяСсылка, Неопределено - Ссылка на найденный по ключу объект.
//   *ОписаниеОшибки - Строка - Текстовое представление ошибки ("Объект не найден" или "Неоднозначный ключ поиска: найдено более одного.").
//
Функция НайтиОбъектПоКлючу(ОбластьПоиска, КлючПоиска, ИмяКолонкиПриемника, СтрокаТЗ)
	
	Успех = Ложь;
	НайденныйОбъект = Неопределено;
	ОписаниеОшибки = "";
	
	О = Новый Структура("КлючПоиска", КлючПоиска);
	СсылкиПоКлючу = ОбластьПоиска.НайтиСтроки(О);
	КоличествоНайденных = СсылкиПоКлючу.Количество();
	Если КоличествоНайденных = 1 Тогда
		Успех = Истина;
		НайденныйОбъект = СсылкиПоКлючу[0].Ссылка;
		СтрокаТЗ[ИмяКолонкиПриемника] = НайденныйОбъект;
	Иначе // 0 или больше 1.
		Если КоличествоНайденных = 0 Тогда
			ОписаниеОшибки = НСтр("ru = 'Объект по ключу поиска не найден.'");
		Иначе // Больше 1.
			ОписаниеОшибки = НСтр("ru = 'Неоднозначный ключ поиска: найдено больше одного объекта.'");
		КонецЕсли;
	КонецЕсли;

	РезультатПоиска = Новый Структура("Успех, НайденныйОбъект, ОписаниеОшибки", Успех, НайденныйОбъект, ОписаниеОшибки);
	Возврат РезультатПоиска;
	
КонецФункции

// Добавляет ошибку поиска ссылочного объекта в список ошибок поиска (единый и сквозной для всего входного файла целиком).
// Параметры аналогичны одноименным параметрам "родительского" метода "НайтиОбязательныйОбъектПоКлючу".
//
Процедура ЗалогироватьОшибкуПоиска(ОшибкиПоиска, ОписаниеОбъекта, КлючПоиска, ОписаниеОшибки)
	
	#Если Сервер И НЕ Сервер Тогда
	    ОшибкиПоиска = Новый ТаблицаЗначений;
	#КонецЕсли 
	СтрокаТЗ = ОшибкиПоиска.Добавить();
	СтрокаТЗ.ТипКлюча = ОписаниеОбъекта.Имя;
	ПредставлениеТипаКлюча = ОписаниеОбъекта.Представление;
	Если НЕ ЗначениеЗаполнено(ПредставлениеТипаКлюча) Тогда
		ПредставлениеТипаКлюча = СтрокаТЗ.ТипКлюча;
	КонецЕсли;
	СтрокаТЗ.ПредставлениеТипаКлюча = ПредставлениеТипаКлюча;
	СтрокаТЗ.КлючПоиска = КлючПоиска;
	СтрокаТЗ.ОписаниеОшибки = ОписаниеОшибки;

КонецПроцедуры

// Добавляет произвольную ошибку в список ошибок строки ТЗ (строки данных входящего файла).
//
// Параметры:
//  СписокОшибокСтроки - Массив - Для логирования (накопления) текстов ошибок в пределах одной строки ТЗ.
//  ОписаниеОшибки - Строка - Текстовое представление ошибки.
//  Отказ - Булево - Взводится в Истину.
//
Процедура ЗалогироватьОшибкуСтроки(СписокОшибокСтроки, ОписаниеОшибки, Отказ)
	
	Отказ = Истина;
	СписокОшибокСтроки.Добавить(ОписаниеОшибки);

КонецПроцедуры

#КонецОбласти 
